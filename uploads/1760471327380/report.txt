ðŸš¨ LongStatement (chaining) in UploadController.java:20 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in UploadController.java:21 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in UploadController.java:67 â†’ chainingDepth=4
ðŸš¨ LongStatement in UploadController.java:76 â†’ length=140 chars
ðŸš¨ BrokenModularization in UploadController.java: imports=20 (high coupling)
ðŸš¨ MagicNumber in BrokenModularizationDetector.java:12 â†’ literal=10 ; context="* Thresholds: imports > 10 or many public fields (>5)"
ðŸš¨ MagicNumber in BrokenModularizationDetector.java:12 â†’ literal=5 ; context="* Thresholds: imports > 10 or many public fields (>5)"
ðŸš¨ MagicNumber in BrokenModularizationDetector.java:27 â†’ literal=10 ; context="if (importCount > 10) {"
ðŸš¨ MagicNumber in BrokenModularizationDetector.java:30 â†’ literal=5 ; context="if (publicFieldCount > 5) {"
ðŸš¨ LongStatement in BrokenModularizationDetector.java:25 â†’ operators=9
ðŸš¨ LongStatement in BrokenModularizationDetector.java:31 â†’ length=127 chars
ðŸš¨ MagicNumber in ComplexConditionalDetector.java:10 â†’ literal=3 ; context="* - >3 logical operators (&&, ||)"
ðŸš¨ MagicNumber in ComplexConditionalDetector.java:11 â†’ literal=2 ; context="* - nesting >2 (by parentheses)"
ðŸš¨ MagicNumber in ComplexConditionalDetector.java:15 â†’ literal=3 ; context="private static final int OPERATOR_THRESHOLD = 3;"
ðŸš¨ MagicNumber in ComplexConditionalDetector.java:16 â†’ literal=2 ; context="private static final int NESTING_THRESHOLD = 2;"
ðŸš¨ MagicNumber in ComplexConditionalDetector.java:30 â†’ literal=2 ; context="opCount = opCount / 2;"
ðŸš¨ LongIdentifier in ComplexConditionalDetector.java:15 â†’ 'OPERATOR_THRESHOLD' length=18 words=18
ðŸš¨ LongIdentifier in ComplexConditionalDetector.java:16 â†’ 'NESTING_THRESHOLD' length=17 words=17
ðŸš¨ LongIdentifier in ComplexConditionalDetector.java:38 â†’ 'OPERATOR_THRESHOLD' length=18 words=18
ðŸš¨ LongIdentifier in ComplexConditionalDetector.java:38 â†’ 'NESTING_THRESHOLD' length=17 words=17
ðŸš¨ LongStatement in ComplexConditionalDetector.java:10 â†’ operators=7
ðŸš¨ LongStatement in ComplexConditionalDetector.java:25 â†’ length=146 chars
ðŸš¨ LongStatement in ComplexConditionalDetector.java:27 â†’ operators=7
ðŸš¨ LongStatement (chaining) in ComplexConditionalDetector.java:27 â†’ chainingDepth=4
ðŸš¨ LongStatement in ComplexConditionalDetector.java:28 â†’ operators=7
ðŸš¨ LongStatement (chaining) in ComplexConditionalDetector.java:28 â†’ chainingDepth=4
ðŸš¨ LongStatement in ComplexConditionalDetector.java:39 â†’ operators=8
ðŸš¨ ComplexConditional in ComplexConditionalDetector.java:25 â†’ operators=7, parenNesting=7, stmt="if (!(s.contains("if(") || s.contains("if (") || s.contains("while(") || s.contains("while (") || s.contains("&&") || s.contains("||"))) continue;"
ðŸš¨ MagicNumber in DeficientEncapsulationDetector.java:10 â†’ literal=30 ; context="* Thresholds: >30% public members OR many getter/setter-only fields."
ðŸš¨ MagicNumber in DeficientEncapsulationDetector.java:34 â†’ literal=0.30 ; context="if (publicRatio > 0.30) {"
ðŸš¨ MagicNumber in DeficientEncapsulationDetector.java:37 â†’ literal=10 ; context="if ((getters + setters) > 10 && (double)(getters + setters) / totalMembers > 0.5) {"
ðŸš¨ MagicNumber in DeficientEncapsulationDetector.java:37 â†’ literal=0.5 ; context="if ((getters + setters) > 10 && (double)(getters + setters) / totalMembers > 0.5) {"
ðŸš¨ LongStatement in DeficientEncapsulationDetector.java:29 â†’ operators=12
ðŸš¨ LongStatement in DeficientEncapsulationDetector.java:30 â†’ operators=9
ðŸš¨ LongStatement in DeficientEncapsulationDetector.java:35 â†’ length=140 chars
ðŸš¨ LongStatement in DeficientEncapsulationDetector.java:37 â†’ operators=7
ðŸš¨ ComplexConditional in DeficientEncapsulationDetector.java:29 â†’ operators=0, parenNesting=3, stmt="if (t.matches("public\\s+[\\w\\<\\>\\[\\]]+\\s+get[A-Z]\\w*\\s*\\(\\s*\\)\\s*\\{?")) getters++;"
ðŸš¨ ComplexConditional in DeficientEncapsulationDetector.java:30 â†’ operators=0, parenNesting=3, stmt="if (t.matches("public\\s+void\\s+set[A-Z]\\w*\\s*\\(.*\\)\\s*\\{?")) setters++;"
ðŸš¨ LongStatement in EmptyCatchDetector.java:37 â†’ operators=9
ðŸš¨ LongStatement (chaining) in EmptyCatchDetector.java:37 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in EmptyCatchDetector.java:40 â†’ chainingDepth=4
ðŸš¨ ComplexConditional in EmptyCatchDetector.java:25 â†’ operators=0, parenNesting=3, stmt="if (t.matches("catch\\s*\\(.*\\)\\s*\\{\\s*")) {"
ðŸš¨ MagicNumber in LongIdentifierDetector.java:9 â†’ literal=30 ; context="* Detects overly long identifiers: threshold > 30 chars or >5 words using camelCase/underscore split."
ðŸš¨ MagicNumber in LongIdentifierDetector.java:9 â†’ literal=5 ; context="* Detects overly long identifiers: threshold > 30 chars or >5 words using camelCase/underscore split."
ðŸš¨ MagicNumber in LongIdentifierDetector.java:13 â†’ literal=32 ; context="private static final int CHAR_THRESHOLD = 32;"
ðŸš¨ MagicNumber in LongIdentifierDetector.java:14 â†’ literal=5 ; context="private static final int WORD_THRESHOLD = 5;"
ðŸš¨ LongIdentifier in LongIdentifierDetector.java:13 â†’ 'CHAR_THRESHOLD' length=14 words=14
ðŸš¨ LongIdentifier in LongIdentifierDetector.java:14 â†’ 'WORD_THRESHOLD' length=14 words=14
ðŸš¨ LongIdentifier in LongIdentifierDetector.java:30 â†’ 'CHAR_THRESHOLD' length=14 words=14
ðŸš¨ LongIdentifier in LongIdentifierDetector.java:30 â†’ 'WORD_THRESHOLD' length=14 words=14
ðŸš¨ LongStatement in LongIdentifierDetector.java:31 â†’ operators=7
ðŸš¨ LongParameterList in LongMethodDetector.java: signature="counting keywords (if, for, while, case, &&, ||, ? :)", params=7, distinctTypes=7
ðŸš¨ MagicNumber in LongMethodDetector.java:12 â†’ literal=30 ; context="* - LOC threshold > 30 (configurable inside)"
ðŸš¨ MagicNumber in LongMethodDetector.java:18 â†’ literal=30 ; context="private static final int LOC_THRESHOLD = 30;"
ðŸš¨ MagicNumber in LongMethodDetector.java:19 â†’ literal=10 ; context="private static final int CC_THRESHOLD = 10;"
ðŸš¨ MagicNumber in LongMethodDetector.java:20 â†’ literal=3 ; context="private static final int NESTING_THRESHOLD = 3;"
ðŸš¨ MagicNumber in LongMethodDetector.java:49 â†’ literal=120 ; context="methodSignature = line.length() > 120 ? line.substring(0, 120) + "..." : line;"
ðŸš¨ MagicNumber in LongMethodDetector.java:49 â†’ literal=120 ; context="methodSignature = line.length() > 120 ? line.substring(0, 120) + "..." : line;"
ðŸš¨ LongIdentifier in LongMethodDetector.java:18 â†’ 'LOC_THRESHOLD' length=13 words=13
ðŸš¨ LongIdentifier in LongMethodDetector.java:19 â†’ 'CC_THRESHOLD' length=12 words=12
ðŸš¨ LongIdentifier in LongMethodDetector.java:20 â†’ 'NESTING_THRESHOLD' length=17 words=17
ðŸš¨ LongIdentifier in LongMethodDetector.java:22 â†’ 'METHOD_START' length=12 words=12
ðŸš¨ LongIdentifier in LongMethodDetector.java:42 â†’ 'METHOD_START' length=12 words=12
ðŸš¨ LongIdentifier in LongMethodDetector.java:77 â†’ 'LOC_THRESHOLD' length=13 words=13
ðŸš¨ LongIdentifier in LongMethodDetector.java:78 â†’ 'CC_THRESHOLD' length=12 words=12
ðŸš¨ LongIdentifier in LongMethodDetector.java:79 â†’ 'NESTING_THRESHOLD' length=17 words=17
ðŸš¨ LongStatement in LongMethodDetector.java:13 â†’ operators=6
ðŸš¨ LongStatement in LongMethodDetector.java:23 â†’ operators=17
ðŸš¨ LongStatement (chaining) in LongMethodDetector.java:49 â†’ chainingDepth=5
ðŸš¨ LongStatement in LongMethodDetector.java:64 â†’ operators=6
ðŸš¨ LongStatement in LongMethodDetector.java:82 â†’ operators=9
ðŸš¨ ComplexConditional in LongMethodDetector.java:64 â†’ operators=2, parenNesting=4, stmt="if (low.contains(" if ") || low.startsWith("if(") || low.contains(" if(")) cc++;"
ðŸš¨ ComplexConditional in LongMethodDetector.java:66 â†’ operators=1, parenNesting=3, stmt="if (low.contains(" for ") || low.startsWith("for(")) cc++;"
ðŸš¨ ComplexConditional in LongMethodDetector.java:67 â†’ operators=1, parenNesting=3, stmt="if (low.contains(" while ") || low.startsWith("while(")) cc++;"
ðŸš¨ MagicNumber in LongParameterListDetector.java:12 â†’ literal=4 ; context="* - Threshold: > 4 parameters"
ðŸš¨ MagicNumber in LongParameterListDetector.java:13 â†’ literal=3 ; context="* - Distinct types > 3 flagged (simple heuristic by checking type tokens)"
ðŸš¨ MagicNumber in LongParameterListDetector.java:17 â†’ literal=4 ; context="private static final int PARAM_THRESHOLD = 4;"
ðŸš¨ MagicNumber in LongParameterListDetector.java:18 â†’ literal=3 ; context="private static final int DISTINCT_TYPE_THRESHOLD = 3;"
ðŸš¨ MagicNumber in LongParameterListDetector.java:29 â†’ literal=2 ; context="String params = m.group(2).trim();"
ðŸš¨ MagicNumber in LongParameterListDetector.java:36 â†’ literal=2 ; context="if (tokens.length >= 2) {"
ðŸš¨ LongIdentifier in LongParameterListDetector.java:17 â†’ 'PARAM_THRESHOLD' length=15 words=15
ðŸš¨ LongIdentifier in LongParameterListDetector.java:18 â†’ 'DISTINCT_TYPE_THRESHOLD' length=23 words=23
ðŸš¨ LongIdentifier in LongParameterListDetector.java:20 â†’ 'METHOD_SIG' length=10 words=10
ðŸš¨ LongIdentifier in LongParameterListDetector.java:27 â†’ 'METHOD_SIG' length=10 words=10
ðŸš¨ LongIdentifier in LongParameterListDetector.java:43 â†’ 'PARAM_THRESHOLD' length=15 words=15
ðŸš¨ LongIdentifier in LongParameterListDetector.java:43 â†’ 'DISTINCT_TYPE_THRESHOLD' length=23 words=23
ðŸš¨ LongStatement in LongParameterListDetector.java:21 â†’ operators=14
ðŸš¨ LongStatement in LongParameterListDetector.java:45 â†’ operators=7
ðŸš¨ MagicNumber in LongStatementDetector.java:10 â†’ literal=120 ; context="* - >120 characters"
ðŸš¨ MagicNumber in LongStatementDetector.java:11 â†’ literal=5 ; context="* - >5 operators count (simple estimate)"
ðŸš¨ MagicNumber in LongStatementDetector.java:12 â†’ literal=3 ; context="* - method chaining depth via '.' occurrences >3 in single statement"
ðŸš¨ MagicNumber in LongStatementDetector.java:16 â†’ literal=120 ; context="private static final int CHAR_LIMIT = 120;"
ðŸš¨ MagicNumber in LongStatementDetector.java:17 â†’ literal=5 ; context="private static final int OPERATOR_LIMIT = 5;"
ðŸš¨ MagicNumber in LongStatementDetector.java:18 â†’ literal=3 ; context="private static final int CHAINING_LIMIT = 3;"
ðŸš¨ LongIdentifier in LongStatementDetector.java:16 â†’ 'CHAR_LIMIT' length=10 words=10
ðŸš¨ LongIdentifier in LongStatementDetector.java:17 â†’ 'OPERATOR_LIMIT' length=14 words=14
ðŸš¨ LongIdentifier in LongStatementDetector.java:18 â†’ 'CHAINING_LIMIT' length=14 words=14
ðŸš¨ LongIdentifier in LongStatementDetector.java:20 â†’ 'OPERATORS' length=9 words=9
ðŸš¨ LongIdentifier in LongStatementDetector.java:29 â†’ 'CHAR_LIMIT' length=10 words=10
ðŸš¨ LongIdentifier in LongStatementDetector.java:34 â†’ 'OPERATORS' length=9 words=9
ðŸš¨ LongIdentifier in LongStatementDetector.java:35 â†’ 'OPERATOR_LIMIT' length=14 words=14
ðŸš¨ LongIdentifier in LongStatementDetector.java:39 â†’ 'CHAINING_LIMIT' length=14 words=14
ðŸš¨ LongStatement in LongStatementDetector.java:20 â†’ operators=13
ðŸš¨ LongStatement (chaining) in LongStatementDetector.java:30 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in LongStatementDetector.java:38 â†’ chainingDepth=4
ðŸš¨ LongIdentifier in MagicNumberDetector.java:16 â†’ 'NUMBER_PATTERN' length=14 words=14
ðŸš¨ LongIdentifier in MagicNumberDetector.java:27 â†’ 'NUMBER_PATTERN' length=14 words=14
ðŸš¨ LongStatement in MagicNumberDetector.java:16 â†’ operators=6
ðŸš¨ LongStatement in MagicNumberDetector.java:31 â†’ operators=6
ðŸš¨ MagicNumber in MissingDefaultSwitchDetector.java:10 â†’ literal=5 ; context="* Threshold: any switch without default, especially if >5 cases."
ðŸš¨ MagicNumber in MissingDefaultSwitchDetector.java:50 â†’ literal=5 ; context="} else if (caseCount > 5 && !hasDefault) {"
ðŸš¨ LongStatement in MissingDefaultSwitchDetector.java:46 â†’ operators=8
ðŸš¨ ComplexConditional in MissingDefaultSwitchDetector.java:26 â†’ operators=1, parenNesting=4, stmt="if (t.startsWith("switch(") || t.startsWith("switch (")) {"
ðŸš¨ ComplexConditional in MissingDefaultSwitchDetector.java:41 â†’ operators=2, parenNesting=3, stmt="if (braceCount < 0 || (inSwitch && lines.get(i).contains("}"))) {"
ðŸš¨ ComplexConditional in MissingDefaultSwitchDetector.java:46 â†’ operators=3, parenNesting=3, stmt="if (inSwitch && braceCount <= 0 && (t.endsWith("}") || t.equals("}"))) {"
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:12 â†’ literal=2 ; context="* Heuristic: a class with <2 members and abstract/interface or inheritance depth high & no children in project (approx)."
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:13 â†’ literal=2 ; context="* For simplicity we flag classes with <2 members and abstract/interface or classes with name ending with 'Adapter'/'Base' but few members."
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:28 â†’ literal=4 ; context="String cls = m.group(4);"
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:41 â†’ literal=2 ; context="boolean isAbstract = m.group(2) != null && m.group(2).contains("abstract");"
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:41 â†’ literal=2 ; context="boolean isAbstract = m.group(2) != null && m.group(2).contains("abstract");"
ðŸš¨ MagicNumber in UnnecessaryAbstractionDetector.java:42 â†’ literal=2 ; context="if (members < 2 && (isAbstract || cls.toLowerCase().contains("base") || cls.toLowerCase().contains("adapter"))) {"
ðŸš¨ LongIdentifier in UnnecessaryAbstractionDetector.java:25 â†’ 'MULTILINE' length=9 words=9
ðŸš¨ LongStatement in UnnecessaryAbstractionDetector.java:13 â†’ length=138 chars
ðŸš¨ LongStatement in UnnecessaryAbstractionDetector.java:25 â†’ length=122 chars
ðŸš¨ LongStatement in UnnecessaryAbstractionDetector.java:42 â†’ operators=7
ðŸš¨ LongStatement (chaining) in UnnecessaryAbstractionDetector.java:42 â†’ chainingDepth=4
ðŸš¨ ComplexConditional in UnnecessaryAbstractionDetector.java:42 â†’ operators=3, parenNesting=3, stmt="if (members < 2 && (isAbstract || cls.toLowerCase().contains("base") || cls.toLowerCase().contains("adapter"))) {"
ðŸš¨ LongStatement (chaining) in DevsyncApplication.java:4 â†’ chainingDepth=4
ðŸš¨ LongIdentifier in ReportGenerator.java:29 â†’ 'ANALYSIS' length=8 words=8
ðŸš¨ LongIdentifier in ReportGenerator.java:31 â†’ 'ANALYSIS' length=8 words=8
ðŸš¨ LongStatement in ReportGenerator.java:29 â†’ operators=6
ðŸš¨ LongStatement in ReportGenerator.java:31 â†’ operators=6
ðŸš¨ MagicNumber in OllamaService.java:27 â†’ literal=3 ; context="prompt = "Great job! Your code analysis shows no issues. Here are 3 quick tips to keep your Java code excellent:\n" +"
ðŸš¨ MagicNumber in OllamaService.java:28 â†’ literal=20 ; context=""1. Keep methods under 20 lines\n" +"
ðŸš¨ MagicNumber in OllamaService.java:32 â†’ literal=3 ; context="prompt = "Code issues found:\n" + reportContent + "\n\nProvide 3 specific fixes for these issues.";"
ðŸš¨ MagicNumber in OllamaService.java:48 â†’ literal=200 ; context="if (response.statusCode() == 200) {"
ðŸš¨ LongIdentifier in OllamaService.java:15 â†’ 'OLLAMA_URL' length=10 words=10
ðŸš¨ LongIdentifier in OllamaService.java:41 â†’ 'OLLAMA_URL' length=10 words=10
ðŸš¨ LongStatement (chaining) in OllamaService.java:9 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in OllamaService.java:10 â†’ chainingDepth=4
ðŸš¨ LongStatement in OllamaService.java:51 â†’ operators=6
ðŸš¨ MagicNumber in ZipExtractor.java:44 â†’ literal=4096 ; context="byte[] buffer = new byte[4096];"
ðŸš¨ ComplexConditional in ZipExtractor.java:21 â†’ operators=0, parenNesting=3, stmt="if (!destFile.getCanonicalPath().startsWith(destDirectory.getCanonicalPath())) {"
ðŸš¨ ComplexConditional in ZipExtractor.java:46 â†’ operators=0, parenNesting=3, stmt="while ((read = zipIn.read(buffer)) != -1) {"
ðŸš¨ LongStatement (chaining) in DevsyncApplicationTests.java:3 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in DevsyncApplicationTests.java:4 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in FilePathReader.java:10 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in Fypv1Application.java:4 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in Fypv1ApplicationTests.java:3 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in Fypv1ApplicationTests.java:4 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in FilePathReader.java:10 â†’ chainingDepth=5
ðŸš¨ LongStatement (chaining) in Fypv1Application.java:4 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in Fypv1ApplicationTests.java:3 â†’ chainingDepth=4
ðŸš¨ LongStatement (chaining) in Fypv1ApplicationTests.java:4 â†’ chainingDepth=5
